(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>u});var o=t(537),r=t.n(o),i=t(645),A=t.n(i),a=t(667),d=t.n(a),l=new URL(t(828),t.b),c=new URL(t(3),t.b),s=A()(r()),m=d()(l),p=d()(c);s.push([n.id,"@font-face {\n    font-family: 'MyHeaderFont';\n    src: url("+m+") format('truetype');\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'myFont';\n    src: url("+p+") format('truetype');\n    font-weight: 600;\n    font-style: normal;\n}\n\nbody {\n    background-color: #efefef;\n}\n\n.hero {\n    background-color: #a9a9a9;\n    display: flex;\n    align-items: center;\n    gap: 2rem;\n    height: 10vh;\n    width: 100vw;\n    font-size: 2rem;\n    color: white;\n    padding-top: 1rem;\n    padding-left: 3rem;\n    padding: 1rem 0 1rem 3rem;\n}\n\n.sidebar{\n    display: flex;\n    flex-direction: column;\n    gap: .5rem;\n    font-size: large;\n    background-color: #caebf2;\n    box-shadow: 5px 10px black;\n    height: 100vh;\n    padding: 2rem;\n    flex: 0 0 15%;\n}\n\n.todoSection {\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    width: 100vw;\n    height: 100vh;\n    background-color: #efefef;\n}\n\n#addProjectBtn,\n#deleteCurrentProjectBtn,\n#defaultProjectBtn,\n.projectNameBtn {\n    background-color: #caebf2;\n    border-color: lightgray;\n    width: 10rem;\n    box-shadow: 0 10px 6px -6px #777;\n    margin-left: -.5rem;\n}\n\n#addProjectBtn {\n    margin-top: .5rem;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    font-family: 'MyFont';\n}\n\n/* Hero */\n\n.heroTitle {\n    font-family: 'myHeaderFont';\n}\n\n.heroImg {\n    height: 4rem;\n    border-radius: 10px;\n}\n\n#thisWeeksTodos:hover,\n#todaysTodos:hover,\n#completedTodos:hover,\n#notCompletedTodos:hover,\nbutton:hover {\n    color: #aaa;\n    cursor: pointer;\n}\n\ninput,\nbutton,\nselect {\n    cursor: pointer;\n}\n\n.sidebarAndTodo {\n    display: flex;\n}\n\n/* Sidebar */\n#sidebarHeader {\n    padding-bottom: .5rem;\n    font-size: 1.5rem;\n}\n\n#sidebarHeader,\n.projects {\n    text-decoration: underline;\n    font-family: 'MyHeaderFont';\n}\n\n.projects {\n    margin-top: 2rem;\n    font-size: 1.5rem;\n}\n\n/* Todo Section */\n\n.todoAndAddBtn {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin-top: 1rem;\n    border-radius: 20px;\n}\n\n.listItem {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-around;\n    padding: .5rem 0 .5rem 2rem;\n    border: 2px solid black;\n    box-shadow: 0 10px 6px -3px #777;\n    height: 3rem;\n    width: 65vw;\n    margin-right: 2rem;\n    margin-top: 1rem;\n    gap: 1rem;\n    border-radius: 10px;\n}\n\n.checkboxTodoContainer {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n}\n\n.priorityBtnContainer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-left: auto;\n    margin-right: 2rem;\n    align-content: center;\n    gap: 1rem;\n}\n\n.todoTextContent {\n    flex-basis: 50%;\n}\n\n.todoPriority {\n    margin-top: .5rem;\n    margin-right: 4rem;\n}\n\n#addItemBtn, \n#addProjectBtn,\n#deleteCurrentProjectBtn,\n#defaultProjectBtn,\n.projectNameBtn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 2.5rem;\n    width: 8rem;\n    margin-bottom: .3rem;\n    border-radius: 24px;\n}\n\n#addItemBtn, \n.listItemBtn,\n#projectSubmitBtn {\n    box-shadow: 0 10px 6px -6px #777;\n    border-color: #a9a9a9;\n}\n\n#addItemBtnCont {\n    display: flex;\n    flex-direction: row;\n    gap: 2rem;\n    justify-content: center;\n}\n\n/* Btns */\n\n.itemTextInput {\n    width: 20vw;\n}\n\n.listItemBtn, \n#projectSubmitBtn {\n    height: 2rem;\n    width: 4rem;\n}\n\n.priorityBtnContainer > p {\n    display: flex;\n    font-size: medium;\n    /* margin-right: -.2rem; */\n    margin-bottom: .5rem;\n    min-width: fit-content;\n}\n\n.dueDate {\n    display: flex;\n    font-size: medium;\n    margin-right: 2rem;\n    margin-top: .5rem;\n    min-width: fit-content;\n}\n\n/* New project modal */\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n  }\n\n/* Modal Content/Box */\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #caebf2;\n    margin-top: 15%;\n    margin-left: 25%;\n    padding: 10px 10px;\n    border: 1px solid #888;\n    width: 60%; /* Could be more or less, depending on screen size */\n    border-radius: 20px;\n}\n\n/* The Close Button */\n.close {\n    color: #aaa;\n    margin-left: auto;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.modal-content > label {\n    font-size: x-large;\n}\n\n.modal-content > input {\n    margin-top: 2rem;\n    margin-bottom: 1rem;\n    width: 40vw;\n}\n\n#projectSubmitBtn {\n    margin-bottom: 1rem;\n}\n\n.close:hover,\n.close:focus {\n    color: black;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n\n.hamburgerIcon {\n    display: none;\n    position: relative;\n    right: 1rem;\n}\n\n.sidebarCloseBtn {\n    display: none;\n}\n\n\n@media screen and (max-width: 480px) {\n\n    .hamburgerIcon {\n        display: block;\n        position: relative;\n        right: 1rem;\n    }\n\n    .listItem {\n        width: 95vw;\n        margin-right: 0;\n        height: 5rem;\n        padding: 0;\n        flex-direction: column;\n    }\n\n    .checkboxTodoContainer {\n        margin-right: auto;\n        margin-left: 1rem;\n        margin-top: 12px;\n    }\n\n    .priorityBtnContainer {\n        gap: .5rem;\n    }\n\n    .itemTextInput {\n        margin-top: 12px;\n        width: 85vw;\n    }\n\n    .listItemBtn {\n        width: 2rem;\n        height: 1.5rem;\n        margin-bottom: 8px;\n        font-size: .5rem;\n    }\n\n    .priorityInput, .todoPriority {\n        margin-left: 12px;\n    }\n    \n    /* Mobile side navigation menu */\n    .sidebar {\n        height: 100%; /* 100% Full-height */\n        width: 0; /* 0 width - change this with JavaScript */\n        position: fixed; /* Stay in place */\n        z-index: 0; /* Stay on top */\n        top: 0; /* Stay at the top */\n        left: 0;\n        overflow: hidden; /* Disable horizontal scroll */\n        padding-top: 60px; /* Place content 60px from the top */\n        transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */\n        padding: 0;\n    }\n\n    .sidebarCloseBtn {\n        display: block;\n        font-size: 2rem;\n    }\n\n    /* The navigation menu links */\n    .sidenav div {\n        transition: 0.3s;\n    }\n    \n    /* Position and style the close button (top right corner) */\n    .sidenav .closebtn {\n        position: absolute;\n        top: 0;\n        right: 25px;\n        font-size: 36px;\n        margin-left: 50px;\n    }\n  \n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["@font-face {\n    font-family: 'MyHeaderFont';\n    src: url('./roboto/Roboto-Black.ttf') format('truetype');\n    font-weight: 600;\n    font-style: normal;\n}\n\n@font-face {\n    font-family: 'myFont';\n    src: url('./roboto/Roboto-Medium.ttf') format('truetype');\n    font-weight: 600;\n    font-style: normal;\n}\n\nbody {\n    background-color: #efefef;\n}\n\n.hero {\n    background-color: #a9a9a9;\n    display: flex;\n    align-items: center;\n    gap: 2rem;\n    height: 10vh;\n    width: 100vw;\n    font-size: 2rem;\n    color: white;\n    padding-top: 1rem;\n    padding-left: 3rem;\n    padding: 1rem 0 1rem 3rem;\n}\n\n.sidebar{\n    display: flex;\n    flex-direction: column;\n    gap: .5rem;\n    font-size: large;\n    background-color: #caebf2;\n    box-shadow: 5px 10px black;\n    height: 100vh;\n    padding: 2rem;\n    flex: 0 0 15%;\n}\n\n.todoSection {\n    display: flex;\n    flex-direction: column;\n    align-content: center;\n    width: 100vw;\n    height: 100vh;\n    background-color: #efefef;\n}\n\n#addProjectBtn,\n#deleteCurrentProjectBtn,\n#defaultProjectBtn,\n.projectNameBtn {\n    background-color: #caebf2;\n    border-color: lightgray;\n    width: 10rem;\n    box-shadow: 0 10px 6px -6px #777;\n    margin-left: -.5rem;\n}\n\n#addProjectBtn {\n    margin-top: .5rem;\n}\n\n* {\n    padding: 0;\n    margin: 0;\n    font-family: 'MyFont';\n}\n\n/* Hero */\n\n.heroTitle {\n    font-family: 'myHeaderFont';\n}\n\n.heroImg {\n    height: 4rem;\n    border-radius: 10px;\n}\n\n#thisWeeksTodos:hover,\n#todaysTodos:hover,\n#completedTodos:hover,\n#notCompletedTodos:hover,\nbutton:hover {\n    color: #aaa;\n    cursor: pointer;\n}\n\ninput,\nbutton,\nselect {\n    cursor: pointer;\n}\n\n.sidebarAndTodo {\n    display: flex;\n}\n\n/* Sidebar */\n#sidebarHeader {\n    padding-bottom: .5rem;\n    font-size: 1.5rem;\n}\n\n#sidebarHeader,\n.projects {\n    text-decoration: underline;\n    font-family: 'MyHeaderFont';\n}\n\n.projects {\n    margin-top: 2rem;\n    font-size: 1.5rem;\n}\n\n/* Todo Section */\n\n.todoAndAddBtn {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    margin-top: 1rem;\n    border-radius: 20px;\n}\n\n.listItem {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-around;\n    padding: .5rem 0 .5rem 2rem;\n    border: 2px solid black;\n    box-shadow: 0 10px 6px -3px #777;\n    height: 3rem;\n    width: 65vw;\n    margin-right: 2rem;\n    margin-top: 1rem;\n    gap: 1rem;\n    border-radius: 10px;\n}\n\n.checkboxTodoContainer {\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n}\n\n.priorityBtnContainer {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    margin-left: auto;\n    margin-right: 2rem;\n    align-content: center;\n    gap: 1rem;\n}\n\n.todoTextContent {\n    flex-basis: 50%;\n}\n\n.todoPriority {\n    margin-top: .5rem;\n    margin-right: 4rem;\n}\n\n#addItemBtn, \n#addProjectBtn,\n#deleteCurrentProjectBtn,\n#defaultProjectBtn,\n.projectNameBtn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    height: 2.5rem;\n    width: 8rem;\n    margin-bottom: .3rem;\n    border-radius: 24px;\n}\n\n#addItemBtn, \n.listItemBtn,\n#projectSubmitBtn {\n    box-shadow: 0 10px 6px -6px #777;\n    border-color: #a9a9a9;\n}\n\n#addItemBtnCont {\n    display: flex;\n    flex-direction: row;\n    gap: 2rem;\n    justify-content: center;\n}\n\n/* Btns */\n\n.itemTextInput {\n    width: 20vw;\n}\n\n.listItemBtn, \n#projectSubmitBtn {\n    height: 2rem;\n    width: 4rem;\n}\n\n.priorityBtnContainer > p {\n    display: flex;\n    font-size: medium;\n    /* margin-right: -.2rem; */\n    margin-bottom: .5rem;\n    min-width: fit-content;\n}\n\n.dueDate {\n    display: flex;\n    font-size: medium;\n    margin-right: 2rem;\n    margin-top: .5rem;\n    min-width: fit-content;\n}\n\n/* New project modal */\n/* The Modal (background) */\n.modal {\n    display: none; /* Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n  }\n\n/* Modal Content/Box */\n.modal-content {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color: #caebf2;\n    margin-top: 15%;\n    margin-left: 25%;\n    padding: 10px 10px;\n    border: 1px solid #888;\n    width: 60%; /* Could be more or less, depending on screen size */\n    border-radius: 20px;\n}\n\n/* The Close Button */\n.close {\n    color: #aaa;\n    margin-left: auto;\n    font-size: 28px;\n    font-weight: bold;\n}\n\n.modal-content > label {\n    font-size: x-large;\n}\n\n.modal-content > input {\n    margin-top: 2rem;\n    margin-bottom: 1rem;\n    width: 40vw;\n}\n\n#projectSubmitBtn {\n    margin-bottom: 1rem;\n}\n\n.close:hover,\n.close:focus {\n    color: black;\n    text-decoration: none;\n    cursor: pointer;\n}\n\n\n.hamburgerIcon {\n    display: none;\n    position: relative;\n    right: 1rem;\n}\n\n.sidebarCloseBtn {\n    display: none;\n}\n\n\n@media screen and (max-width: 480px) {\n\n    .hamburgerIcon {\n        display: block;\n        position: relative;\n        right: 1rem;\n    }\n\n    .listItem {\n        width: 95vw;\n        margin-right: 0;\n        height: 5rem;\n        padding: 0;\n        flex-direction: column;\n    }\n\n    .checkboxTodoContainer {\n        margin-right: auto;\n        margin-left: 1rem;\n        margin-top: 12px;\n    }\n\n    .priorityBtnContainer {\n        gap: .5rem;\n    }\n\n    .itemTextInput {\n        margin-top: 12px;\n        width: 85vw;\n    }\n\n    .listItemBtn {\n        width: 2rem;\n        height: 1.5rem;\n        margin-bottom: 8px;\n        font-size: .5rem;\n    }\n\n    .priorityInput, .todoPriority {\n        margin-left: 12px;\n    }\n    \n    /* Mobile side navigation menu */\n    .sidebar {\n        height: 100%; /* 100% Full-height */\n        width: 0; /* 0 width - change this with JavaScript */\n        position: fixed; /* Stay in place */\n        z-index: 0; /* Stay on top */\n        top: 0; /* Stay at the top */\n        left: 0;\n        overflow: hidden; /* Disable horizontal scroll */\n        padding-top: 60px; /* Place content 60px from the top */\n        transition: 0.5s; /* 0.5 second transition effect to slide in the sidenav */\n        padding: 0;\n    }\n\n    .sidebarCloseBtn {\n        display: block;\n        font-size: 2rem;\n    }\n\n    /* The navigation menu links */\n    .sidenav div {\n        transition: 0.3s;\n    }\n    \n    /* Position and style the close button (top right corner) */\n    .sidenav .closebtn {\n        position: absolute;\n        top: 0;\n        right: 25px;\n        font-size: 36px;\n        margin-left: 50px;\n    }\n  \n}\n"],sourceRoot:""}]);const u=s},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",o=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),o&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),o&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,o,r,i){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(o)for(var a=0;a<this.length;a++){var d=this[a][0];null!=d&&(A[d]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);o&&A[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),r&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=r):c[4]="".concat(r)),e.push(c))}},e}},667:n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),A=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(A).concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,o=0;o<e.length;o++)if(e[o].identifier===n){t=o;break}return t}function o(n,o){for(var i={},A=[],a=0;a<n.length;a++){var d=n[a],l=o.base?d[0]+o.base:d[0],c=i[l]||0,s="".concat(l," ").concat(c);i[l]=c+1;var m=t(s),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==m)e[m].references++,e[m].updater(p);else{var u=r(p,o);o.byIndex=a,e.splice(a,0,{identifier:s,updater:u,references:1})}A.push(s)}return A}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var i=o(n=n||[],r=r||{});return function(n){n=n||[];for(var A=0;A<i.length;A++){var a=t(i[A]);e[a].references--}for(var d=o(n,r),l=0;l<i.length;l++){var c=t(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=d}}},569:n=>{var e={};n.exports=function(n,t){var o=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},828:(n,e,t)=>{n.exports=t.p+"2a4285847db4a9acb97f.ttf"},3:(n,e,t)=>{n.exports=t.p+"7429a63c09f79a1760b0.ttf"}},e={};function t(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return n[o](i,i.exports,t),i.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var o in e)t.o(e,o)&&!t.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:e[o]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.p="/",t.b=document.baseURI||self.location.href;var o={};(()=>{t.d(o,{c:()=>pn,F:()=>mn});var n=t(379),e=t.n(n),r=t(795),i=t.n(r),A=t(569),a=t.n(A),d=t(565),l=t.n(d),c=t(216),s=t.n(c),m=t(589),p=t.n(m),u=t(426),B={};B.styleTagTransform=p(),B.setAttributes=l(),B.insert=a().bind(null,"head"),B.domAPI=i(),B.insertStyleElement=s(),e()(u.Z,B),u.Z&&u.Z.locals&&u.Z.locals;const g=()=>{let n=document.createElement("div");return n.classList.add("listItem"),""==pn[mn]&&editListItemFormat(n),n},f=n=>{const e=document.createElement("button");var t;return e.classList.add("listItemBtn",n),e.textContent=(t=n).charAt(0).toUpperCase()+t.slice(1),e},C=n=>{let e=document.createElement("button");return e.textContent=n,e.classList.add("projectNameBtn"),e.setAttribute("index",pn.length),e};function h(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function I(n){h(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function y(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function b(n,e){h(1,arguments);var t=e||{},o=t.locale,r=o&&o.options&&o.options.weekStartsOn,i=null==r?0:y(r),A=null==t.weekStartsOn?i:y(t.weekStartsOn);if(!(A>=0&&A<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var a=I(n),d=a.getDay(),l=(d<A?7:0)+d-A;return a.setDate(a.getDate()-l),a.setHours(0,0,0,0),a}function x(n,e,t){h(2,arguments);var o=b(n,t),r=b(e,t);return o.getTime()===r.getTime()}function v(n){h(1,arguments);var e=I(n);return e.setHours(0,0,0,0),e}function E(n,e){h(2,arguments);var t=v(n),o=v(e);return t.getTime()===o.getTime()}const w={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let k;const S=new Uint8Array(16);function j(){if(!k&&(k="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!k))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return k(S)}const T=[];for(let n=0;n<256;++n)T.push((n+256).toString(16).slice(1));const P=function(n,e,t){if(w.randomUUID&&!e&&!n)return w.randomUUID();const o=(n=n||{}).random||(n.rng||j)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){t=t||0;for(let n=0;n<16;++n)e[t+n]=o[n];return e}return function(n,e=0){return(T[n[e+0]]+T[n[e+1]]+T[n[e+2]]+T[n[e+3]]+"-"+T[n[e+4]]+T[n[e+5]]+"-"+T[n[e+6]]+T[n[e+7]]+"-"+T[n[e+8]]+T[n[e+9]]+"-"+T[n[e+10]]+T[n[e+11]]+T[n[e+12]]+T[n[e+13]]+T[n[e+14]]+T[n[e+15]]).toLowerCase()}(o)},D=document.querySelector(".allListItemsContainer"),L=(n,e)=>{cn();for(var t=0;t<Object.keys(pn[mn]).length;t++){const o=g();o.setAttribute("value",[t]),pn[mn]=nn(pn[mn]),pn[mn][t].todoListOrder=t,o.classList.add(),t==n?N(o,t,e):q(o,t)}if(pn.length>2||pn[1].length>0){let n=JSON.stringify(pn);localStorage.setItem("storedProjects",n)}else localStorage.clear()},N=(n,e,t)=>{void 0!==t&&n.setAttribute("todoId",t);let o=(()=>{let n=document.createElement("input");return n.setAttribute("type","text"),n.classList.add("itemTextInput"),n.setAttribute("rows","2"),n})(),r=(()=>{const n=["Low Priority","Medium Priority","High Priority"],e=document.createElement("select");e.id="selectList";for(var t=0;t<n.length;t++){const o=document.createElement("option");o.value=n[t],o.text=n[t],e.appendChild(o)}return e})();r.classList.add("priorityInput");let i=(()=>{let n=document.createElement("input");return n.setAttribute("type","date"),n.classList.add("dateInput"),n})();null!=pn[mn][e]&&on(o,r,i,e);let A=f("cancel");A.addEventListener("click",(function(){document.querySelector("#addItemBtn").disabled=!1,J(n)}));let a=f("submit");a.addEventListener("click",(function(){document.querySelector("#addItemBtn").disabled=!1,H(n)}));const d=z(r,i,A,a);return Y(n,d,o)},q=(n,e)=>{n.setAttribute("originalProjectIndex",pn[mn][e].originalProjectIndex),n.setAttribute("todoId",pn[mn][e].todoId);const t=(()=>{const n=document.createElement("input");return n.type="checkbox",n.classList.add("checkbox"),n})();t.checked=pn[mn][e].completed;const o=(n=>{const e=document.createElement("p");return e.classList.add("todoDescription"),e.textContent=n,e})(pn[mn][e].title),r=(n=>{const e=document.createElement("p");return e.classList.add("todoPriority"),e.textContent=n,e})(pn[mn][e].priority),i=(n=>{const e=document.createElement("p");return e.classList.add("dueDate"),e.textContent=n,e})(pn[mn][e].dueDate);t.setAttribute("originalProjectIndex",pn[mn][e].originalProjectIndex),t.setAttribute("todoListOrder",pn[mn][e].todoListOrder),t.addEventListener("change",(function(n){X(n,e)}));const A=f("edit");A.addEventListener("click",R);const a=f("delete");a.addEventListener("click",Z);const d=Q(t,o),l=O(r,i,A,a);return F(n,d,l)},Q=(n,e)=>{const t=document.createElement("div");return t.classList.add("checkboxTodoContainer"),U(t,n,e)},U=(n,e,t)=>(n.appendChild(e),n.appendChild(t),n),z=(n,e,t,o)=>{let r=document.createElement("div");return r.classList.add("priorityBtnContainer"),M(r,n,e,t,o)},M=(n,e,t,o,r)=>(n.appendChild(e),n.appendChild(t),n.appendChild(o),n.appendChild(r),n),O=(n,e,t,o)=>{let r=document.createElement("div");return r.classList.add("priorityBtnContainer"),W(r,n,e,t,o)},W=(n,e,t,o,r)=>(n.appendChild(e),n.appendChild(t),n.appendChild(o),n.appendChild(r),n),Y=(n,e,t)=>{n.appendChild(t),n.appendChild(e),D.appendChild(n)},F=(n,e,t)=>{n.appendChild(e),n.appendChild(t),D.appendChild(n)},H=n=>{const e=n.getAttribute("todoId");K(n,e),L()},J=()=>{L()},R=n=>{const e=n.target.parentNode.parentNode.getAttribute("todoId"),t=n.target.parentNode.parentNode.getAttribute("value");L(t,e)},Z=n=>{const e=n.target.parentNode.parentNode.getAttribute("originalProjectIndex");let t=n.target.parentNode.parentNode.getAttribute("todoId");const o=pn[e].findIndex((n=>n.todoId===t));pn[e].splice(o,1),pn[mn].splice(n.target.parentNode.parentNode.getAttribute("value"),1),L()},X=(n,e)=>{let t=n.target.getAttribute("originalProjectIndex"),o=n.target.getAttribute("todoListOrder"),r=n.target.parentNode.getAttribute("value");n.target.checked?(V(t,o,r,e),L()):(G(t,o,r,e),L())},V=(n,e,t,o)=>{0==mn?(pn[n][e].completed=!0,pn[0][t].completed=!0):pn[mn][o].completed=!0},G=(n,e,t,o)=>{0==mn?(pn[n][e].completed=!1,pn[0][t].completed=!1):pn[mn][o].completed=!1},_=document.querySelector(".allListItemsContainer"),K=(n,e=null)=>{let t={};return t.title=n.children[0].value,t.priority=n.children[1].children[0].value,t.dueDate=en(n),t.completed="",t.originalProjectIndex=`${mn}`,t.todoListOrder="",t.todoId=null===e?P():e,$(t,n)},$=(n,e)=>{if(e.hasAttribute("todoId")){const t=e.getAttribute("todoId");for(let e=0;e<pn.length;e++)for(let o=0;o<pn[e].length;o++)if(pn[e][o].todoId===t){const t=o;pn[e][t]=n,L()}}else{const e=n=>{pn[mn].push(n)};e(n)}},nn=n=>n.sort((function(n,e){return new Date(rn(n.dueDate))-new Date(rn(e.dueDate))})),en=n=>0==/\d/.test(n.children[1].children[1].value)?"No Date":tn(n),tn=n=>{let e=new Date(n.children[1].children[1].value);const t=e.getUTCDate();return e.getUTCMonth()+1+"/"+t+"/"+e.getUTCFullYear()},on=(n,e,t,o)=>{n.value=pn[mn][o].title,e.value=pn[mn][o].priority,t.valueAsDate=new Date(rn(pn[mn][o].dueDate))},rn=n=>n.replaceAll("/",", "),An=(n,e)=>{1==pn[n][e].completed&&pn[mn].push(JSON.parse(JSON.stringify(pn[n][e])))},an=(n,e)=>{1!=pn[n][e].completed&&pn[mn].push(JSON.parse(JSON.stringify(pn[n][e])))},dn=(n,e)=>{(function(n,e){return h(1,arguments),x(n,Date.now(),e)})(new Date(rn(pn[n][e].dueDate)))&&pn[mn].push(JSON.parse(JSON.stringify(pn[n][e])))},ln=(n,e)=>{(function(n){return h(1,arguments),E(n,Date.now())})(new Date(rn(pn[n][e].dueDate)))&&pn[mn].push(JSON.parse(JSON.stringify(pn[n][e])))},cn=()=>{_.innerHTML=""},sn=document.querySelector(".allProjectsContainer");let mn=1,pn=[[],[]];!function(){if(null!=localStorage.getItem("storedProjects")&&(pn=JSON.parse(localStorage.getItem("storedProjects")),L()),null!=localStorage.getItem("storedProjectBtnNames")){let n=JSON.parse(localStorage.getItem("storedProjectBtnNames"));for(let e=0;e<n.length;e++){let t=C(n[e]);sn.appendChild(t),t.addEventListener("click",(function(){E(event)}))}}const n=document.querySelector("#addItemBtn"),e=document.getElementById("addProjectBtn"),t=document.querySelector("#defaultProjectBtn"),o=document.querySelector("#projectSubmitBtn"),r=document.querySelector("#deleteCurrentProjectBtn"),i=document.querySelector("#todaysTodos"),A=document.querySelector("#thisWeeksTodos"),a=document.querySelector("#completedTodos"),d=document.querySelector("#notCompletedTodos"),l=document.getElementById("addProjectModal"),c=document.getElementsByClassName("close")[0],s=document.querySelector(".hamburgerIcon"),m=document.querySelector(".sidebar"),p=document.querySelector(".sidebarCloseBtn");n.addEventListener("click",(()=>{u()})),e.addEventListener("click",(()=>{x()})),o.addEventListener("click",(()=>{h()})),r.addEventListener("click",(()=>{I()})),i.addEventListener("click",(function(){b("today")})),A.addEventListener("click",(function(){b("week")})),a.addEventListener("click",(function(){b("completed")})),d.addEventListener("click",(function(){b("notCompleted")})),t.addEventListener("click",(function(){E(event)})),s.addEventListener("click",(function(){B()})),p.addEventListener("click",(function(){g()}));const u=()=>{n.disabled=!0;const e=document.createElement("div");e.classList.add("listItem"),N(e)},B=()=>{m.style.width="250px",m.style.padding="2rem"},g=()=>{m.style.width="0px",m.style.padding="0"};let f=[];const h=()=>{let n=document.querySelector("#addProjectInput").value;f.push(n),y();let e=v(n);l.style.display="none",sn.appendChild(e),L()},I=()=>{if(n.disabled=!1,1==mn)pn[1]=[];else{if(0==mn)return;if(mn>1){const n=document.querySelector(".allProjectsContainer").children[mn-2],e=mn;n.remove(),pn.splice(mn,1),f.splice(mn-1,1),((n=0)=>{const e=document.querySelector(".allProjectsContainer").children;for(var t=n;t<e.length;t++){let n=t+2;e[t].setAttribute("index",n)}})(e-2),(n=>{for(let e=n;e<pn.length;e++)for(let n=0;n<pn[e].length;n++)pn[e][n].originalProjectIndex=e})(e),y()}}mn=1,L()},y=()=>{let n=JSON.stringify(f);localStorage.setItem("storedProjectBtnNames",n)},b=n=>{mn=0,(n=>{pn[0]=[];for(var e=0;e<pn.length;e++)for(var t=0;t<pn[e].length;t++)"week"==n?dn(e,t):"today"==n?ln(e,t):"completed"==n?An(e,t):"notCompleted"==n&&an(e,t)})(n),L()},x=()=>{l.style.display="block",document.querySelector("#addProjectInput").value=""};c.addEventListener("click",(()=>{l.style.display="none"})),window.addEventListener("click",(n=>{n.target==l&&(l.style.display="none")}));const v=n=>{let e=C(n);return t=[],pn.push(t),e.addEventListener("click",(function(){E(event)})),w(e),e;var t},E=n=>{let e=n.target;w(e),L(pn[mn])},w=n=>mn=n.getAttribute("index")}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,